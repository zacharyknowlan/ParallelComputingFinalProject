#include "VTKWriter.hpp"

void VTKWriter::SetupWriteParameters()
{
    mfem::RefinedGeometry *RefG;
    num_points = num_elements = element_data_size = 0;
    for (int i = 0; i < mesh.GetNE(); i++)
    {
        mfem::Geometry::Type geom = mesh.GetElementBaseGeometry(i);
        int nv = mfem::Geometries.GetVertices(geom)->GetNPoints();
        RefG = mfem::GlobGeometryRefiner.Refine(geom, 0, 1);
        num_points += RefG->RefPts.GetNPoints();
        num_elements += RefG->RefGeoms.Size() / nv;
        element_data_size += (RefG->RefGeoms.Size() / nv) * (nv + 1);
    }
}
void VTKWriter::SetValuesForRank(int np, int nc, int size)
{
    num_points = np;
    num_elements = nc;
    element_data_size = size;
}

void VTKWriter::DetermineRankWork(int WorldSize, int WorldRank, bool& RankWritePoints, bool& RankWriteElements, 
                                bool& RankWriteElementTypes, bool& RankWriteElementMaterials, bool& RankWriteField1,
                                bool& RankWriteField2)
{
    switch (WorldSize)
    {
        case 1:
            RankWritePoints = true;
            RankWriteElements = true;
            RankWriteElementTypes = true;
            RankWriteElementMaterials = true;
            RankWriteField1 = true;
            RankWriteField2 = true;
            break;
        case 2:
            switch (WorldRank)
            {
                case 0:
                    RankWritePoints = true;
                    RankWriteElements = true;
                    RankWriteElementTypes = true;
                    RankWriteElementMaterials = true;
                    break;
                case 1: 
                    RankWriteField1 = true;
                    RankWriteField2 = true;
                    break;
            }
            break;
        case 3:
            switch (WorldRank)
            {
                case 0:
                    RankWritePoints = true;
                    RankWriteElements = true;
                    break;
                case 1:
                    RankWriteElementTypes = true;
                    RankWriteElementMaterials = true;
                    RankWriteField1 = true;
                    break;
                case 2:
                    RankWriteField2 = true;
                    break;
            }
            break;
        case 4:
            switch (WorldRank)
            {
                case 0:
                    RankWritePoints = true;
                    break;
                case 1:
                    RankWriteElements = true;
                    RankWriteElementTypes = true;
                    RankWriteElementMaterials = true;
                    break;
                case 2:
                    RankWriteField1 = true;
                    break;
                case 3:
                    RankWriteField2 = true;
                    break;
            }
            break;
        case 5:
            switch (WorldRank)
            {
                case 0:
                    RankWritePoints = true;
                    break;
                case 1:
                    RankWriteElements = true;
                    break;
                case 2:
                    RankWriteElementTypes = true;
                    RankWriteElementMaterials = true;
                    break;
                case 3:
                    RankWriteField1 = true;
                    break;
                case 4:
                    RankWriteField2 = true;
                    break;
            }
            break;
        case 6:
            switch (WorldRank)
            {
                case 0:
                    RankWritePoints = true;
                    break;
                case 1:
                    RankWriteElements = true;
                    break;
                case 2:
                    RankWriteElementTypes = true;
                    break;
                case 3:
                    RankWriteElementMaterials = true;
                    break;
                case 4:
                    RankWriteField1 = true;
                    break;
                case 5:
                    RankWriteField2 = true;
                    break;
            }
            break;
    }
}

void VTKWriter::WriteHeader()
{
    oss << "# vtk DataFile Version 3.0\n" << "Generated by VTKWriter\n";
    oss << "ASCII\n" << "DATASET UNSTRUCTURED_GRID\n";
}

void VTKWriter::WriteNodes()
{
    mfem::RefinedGeometry *RefG;
    mfem::DenseMatrix pmat;

    oss << "POINTS " << num_points << " double\n";
    for (int i = 0; i < mesh.GetNE(); i++)
    {
        RefG = mfem::GlobGeometryRefiner.Refine(mesh.GetElementBaseGeometry(i), 0, 1);
        mesh.GetElementTransformation(i)->Transform(RefG->RefPts, pmat);

        for (int j = 0; j < pmat.Width(); j++)
        {
            oss << pmat(0, j) << ' ';
            if (pmat.Height() > 1)
            {
                oss << pmat(1, j) << ' ';
                if (pmat.Height() > 2)
                {
                    oss << pmat(2, j);
                }
                else
                {
                    oss << 0.0;
                }
            }
            else
            {
                oss << 0.0 << ' ' << 0.0;
            }
            oss << '\n';
        }
    }
}

void VTKWriter::WriteElements()
{
    mfem::RefinedGeometry *RefG;
    oss << "CELLS " << num_elements << ' ' << element_data_size << '\n';
    int np = 0;
    for (int i = 0; i < mesh.GetNE(); i++)
    {
       mfem::Geometry::Type geom = mesh.GetElementBaseGeometry(i);
       int nv = mfem::Geometries.GetVertices(geom)->GetNPoints();
       RefG = mfem::GlobGeometryRefiner.Refine(geom, 0, 1);
       mfem::Array<int> &RG = RefG->RefGeoms;
 
       for (int j = 0; j < RG.Size(); )
       {
          oss << nv;
          for (int k = 0; k < nv; k++, j++)
          {
             oss << ' ' << np + RG[j];
          }
          oss << '\n';
       }
       np += RefG->RefPts.GetNPoints();
    }
}

void VTKWriter::WriteElementTypes()
{
    mfem::RefinedGeometry *RefG;
    oss << "CELL_TYPES " << num_elements << '\n';
    for (int i = 0; i < mesh.GetNE(); i++)
    {
       mfem::Geometry::Type geom = mesh.GetElementBaseGeometry(i);
       int nv = mfem::Geometries.GetVertices(geom)->GetNPoints();
       RefG = mfem::GlobGeometryRefiner.Refine(geom, 0, 1);
       mfem::Array<int> &RG = RefG->RefGeoms;
       int vtk_Element_type = mfem::VTKGeometry::Map[geom];
 
       for (int j = 0; j < RG.Size(); j += nv)
       {
          oss << vtk_Element_type << '\n';
       }
    }
}

void VTKWriter::WriteElementMaterials()
{
    mfem::RefinedGeometry *RefG;

    oss << "CELL_DATA " << num_elements << '\n';
    oss << "SCALARS material int\n";
    oss << "LOOKUP_TABLE default\n";
    for (int i = 0; i < mesh.GetNE(); i++)
    {
        mfem::Geometry::Type geom = mesh.GetElementBaseGeometry(i);
        int nv = mfem::Geometries.GetVertices(geom)->GetNPoints();
        RefG = mfem::GlobGeometryRefiner.Refine(geom, 0, 1);
        int attr = mesh.GetAttribute(i);
        for (int j = 0; j < RefG->RefGeoms.Size(); j += nv)
        {
            oss << attr << '\n';
        }
    }
}

void VTKWriter::WriteVectorField(mfem::GridFunction& gridfunc, const std::string& field_name)
{
    mfem::RefinedGeometry *RefG;
    mfem::DenseMatrix vval, pmat;

    oss << "POINT_DATA " << num_points << "\n";
    oss << "VECTORS " << field_name << " double\n";
    for (int i = 0; i < mesh.GetNE(); i++)
    {
        RefG = mfem::GlobGeometryRefiner.Refine(mesh.GetElementBaseGeometry(i), 0, 1);
        mfem::ElementTransformation* T = mesh.GetElementTransformation(i);
        gridfunc.GetVectorValues(*T, RefG->RefPts, vval, &pmat);
        for (int j = 0; j < vval.Width(); j++)
        {
            oss << vval(0, j) << ' ' << vval(1, j) << ' ';
            if (vval.Height() == 2)
            {
                oss << 0.0;
            }
            else
            {
                oss << vval(2, j);
            }
            oss << '\n';
        }
    }
}

void VTKWriter::WriteTensorField(mfem::GridFunction& gridfunc, const std::string& field_name)
{
    mfem::RefinedGeometry *RefG;
    mfem::DenseMatrix vval, pmat;

    oss << "FIELD FieldData 1\n";
    oss << field_name << ' ' << 9 << ' ' << num_points << " double\n"; 

    for (int i = 0; i < mesh.GetNE(); i++)
    {
        RefG = mfem::GlobGeometryRefiner.Refine(mesh.GetElementBaseGeometry(i), 0, 1);
        mfem::ElementTransformation* T = mesh.GetElementTransformation(i);
        gridfunc.GetVectorValues(*T, RefG->RefPts, vval, &pmat);
        
        if (mesh.SpaceDimension() == 2)
        {
            for (int j=0; j<vval.Width(); j++)
            {
                oss << vval(0,j) << ' ' << vval(1,j) << ' ' << 0. << ' ';
                oss << vval(2,j) << ' ' << vval(3,j) << ' ' << 0. << ' ';
                oss << 0. << ' ' << 0. << ' ' << 0. << '\n';
            }
        }
        else if (mesh.SpaceDimension() == 3)
        {
            for (int j=0; j<vval.Width(); j++)
            {
                oss << vval(0,j) << ' ' << vval(1,j) << ' ' << vval(2,j) << ' ';
                oss << vval(3,j) << ' ' << vval(4,j) << ' ' << vval(5,j) << ' ';
                oss << vval(6,j) << ' ' << vval(7,j) << ' ' << vval(8,j) << '\n';
            }
        }
    }
}

